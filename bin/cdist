#!/usr/bin/env python3
# -*- coding: utf-8 -*-
#
# 2010-2016 Nico Schottelius (nico-cdist at schottelius.org)
# 2016 Darko Poljak (darko.poljak at gmail.com)
# 2021 Dennis Camera (cdist at dtnr.ch)
#
# This file is part of cdist.
#
# cdist is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# cdist is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with cdist. If not, see <http://www.gnu.org/licenses/>.
#
#

import logging
import os
import sys

log = logging.getLogger("cdist")

# See if this file's parent is cdist module
# and if so add it to module search path.
cdist_dir = os.path.realpath(
    os.path.join(
        os.path.dirname(os.path.realpath(__file__)),
        os.pardir))
cdist_init_dir = os.path.join(cdist_dir, 'cdist', '__init__.py')
if os.path.exists(cdist_init_dir):
    sys.path.insert(0, cdist_dir)

import cdist            # noqa 402
import cdist.argparse   # noqa 402
import cdist.banner     # noqa 402
import cdist.config     # noqa 402
import cdist.shell      # noqa 402
import cdist.inventory  # noqa 402


def _check_python_version():
    import textwrap
    silence_hint = textwrap.dedent("""\
    You can silence this warning by
    - setting the environment variable CDIST_CHECK_PYTHON_VERSION=no, or
    - by adding check_python_version = no to the cdist.cfg.
    """)

    if sys.version_info < cdist.MIN_RECOMMENDED_PYTHON_VERSION:
        log.warning(
            "It is not recommended to run cdist on Python versions older than "
            "%s. You are using %s.\n"
            "While it should still work, you may want to try to upgrade to a "
            "newer version of Python.\n\n%s",
            ".".join(map(str, cdist.MIN_RECOMMENDED_PYTHON_VERSION)),
            sys.version.split()[0],
            silence_hint)

    # NOTE: test for releaselevel before MAX_TESTED_PYTHON_VERSION because
    #       pre-release versions should never be in MAX_TESTED_PYTHON_VERSION.
    elif sys.version_info.releaselevel != "final":
        log.warning(
            "You are running cdist on a pre-release version of Python (%s). "
            "You may experience bugs.\n\n%s",
            sys.version.split()[0],
            silence_hint)

    # NOTE: limit the precision of sys.version_info to the precision of
    #       cdist.MAX_TESTED_PYTHON_VERSION to not produce false-positives when
    #       cdist is run on e.g. (3, 10, 2) and MAX_TESTED_PYTHON_VERSION is
    #       (3, 10)
    elif sys.version_info[:len(cdist.MAX_TESTED_PYTHON_VERSION)] \
            > cdist.MAX_TESTED_PYTHON_VERSION:
        log.warning(
            "cdist has not been tested on Python %s. Please check if there is "
            "a newer version of cdist available.\n\n%s",
            sys.version.split()[0],
            silence_hint)


def _commandline():
    """Parse command line"""

    parser, cfg = cdist.argparse.parse_and_configure(sys.argv[1:])
    args = cfg.get_args()

    # Work around python 3.3 bug:
    # http://bugs.python.org/issue16308
    # http://bugs.python.org/issue9253

    # FIXME: catching AttributeError also hides
    # real problems.. try a different way

    # FIXME: we always print main help, not
    # the help of the actual parser being used!
    try:
        getattr(args, "func")
    except AttributeError:
        parser['main'].print_help()
        sys.exit(0)

    if cfg.get_config(section="GLOBAL").get("check_python_version", True):
        _check_python_version()

    args.func(args)


if __name__ == "__main__":
    if sys.version_info < cdist.MIN_SUPPORTED_PYTHON_VERSION:
        log.error(
            "Python >= %s is required on the source host. "
            "You are using %s.",
            ".".join(map(str, cdist.MIN_SUPPORTED_PYTHON_VERSION)),
            sys.version.split()[0])
        sys.exit(1)

    try:
        if os.path.basename(sys.argv[0])[:2] == "__":
            import cdist.emulator
            cdist.emulator.Emulator(sys.argv).run()
        else:
            _commandline()
        sys.exit(0)
    except cdist.Error as e:
        log.error(e)
        sys.exit(1)
    except KeyboardInterrupt:
        sys.exit(2)
